%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: Grammalecte rules
file_extensions:
  - grx
scope: source.grammalecte
contexts:
  main:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    - match: '"[^"]*"'
      scope: string.quoted.double
      #push: double_quoted_string

    # Comments begin with a '#' and finish at the end of the line
    - match: '#'
      scope: punctuation.definition.comment.grammalecte
      push: line_comment

    # Numbers
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.grammalecte

    # Keywords are if, else.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(?:if|else|and|or|not|in)\b'
      scope: keyword.control.grammalecte

    - match: '\b(?:True|False|None)\b'
      scope: constant.language.grammalecte
    
    - match: '\b(?:spell|morph|morphex|stem|textarea0?\w*|before0?\w*|after0?\w*|word|option|define|select|exclude|analysex?|apposition|is[A-Z]\w+|rewriteSubject|checkD\w+|getD\w+|sugg[A-Z]\w+|switch[A-Z]\w+|ceOrCet|formatN\w+|mbUnit|hasSimil)\b'
      scope: entity.name.function.grammalecte

    - match: '\b(?:replace|endswith|startswith|search|upper|lower|capitalize|strip|rstrip|is(?:upper|lower|digit|title))\b'
      scope: support.function.grammalecte

    - match: '\bre\b'
      scope: support.class.grammalecte

    # Rule options
    - match: '^__[]\[\w<>/]+__|</?js>'
      scope: variable.parameter.grammalecte

    # Definitions and options
    - match: '^DEF[:] |^OPT[:] '
      scope: variable.parameter.grammalecte

    # Tests
    - match: '^T(EST|ODO)[:] '
      scope: storage.modifier.grammalecte

    # JS groups positioning codes
    - match: ' @@[0-9w,$*>:]+'
      scope: comment.line.percentage.grammalecte

    # rule delimiters
    - match: '<<-'
      scope: keyword.action
    - match: '-(\d*)>>'
      scope: keyword.error
      captures:
        1: constant.numeric.grammalecte
    - match: '~(\d*)>>'
      scope: keyword.textprocessor
      captures:
        1: constant.numeric.grammalecte
    - match: '=>>'
      scope: keyword.disambiguator

    # Escaped chars
    - match: '\\(?:\d+|w|d|b|n|s|t)'
      scope: constant.character.escape

    # URL
    - match: '\| ?https?://[\w./%?&=#+-]+'
      scope: string.other.grammalecte

    # Example errors
    - match: '{{.+}}'
      scope: message.error

    # special chars
    - match: '\[|[](){}|@=*^?+]'
      scope: keyword.other

#  double_quoted_string:
#    - meta_scope: string.quoted.double.grammalecte
#    - match: '\\.'
#      scope: constant.character.escape.grammalecte
#    - match: '(?:"|$)'
#      scope: punctuation.definition.string.end.grammalecte
#      pop: true

  line_comment:
    - meta_scope: comment.line.grammalecte
    - match: '\\[0-9]+'
      scope: constant.character.escape
    - match: '\| ?https?://[\w./%?&=#+-]+'
      scope: string.other
    - match: $
      pop: true
